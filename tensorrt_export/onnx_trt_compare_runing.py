#!/usr/bin/env python3
# Template auto-generated by polygraphy [v0.47.1] on 06/05/23 at 12:36:31
# code gen with onnx_trt_compare.sh
# but i edit the code to make it more readable
import tensorrt as trt
import os
import numpy as np
from polygraphy.logger import G_LOGGER
G_LOGGER.module_severity = {'': G_LOGGER.VERBOSE}

from polygraphy import constants
import onnx
from polygraphy.backend.common import BytesFromPath
from polygraphy.backend.onnx import BytesFromOnnx, ModifyOutputs as ModifyOnnxOutputs, OnnxFromPath
from polygraphy.backend.onnxrt import OnnxrtRunner, SessionFromOnnx
from polygraphy.backend.trt import EngineFromBytes, TrtRunner
from polygraphy.common import TensorMetadata
from polygraphy.comparator import Comparator, CompareFunc, DataLoader
from polygraphy.exception import PolygraphyException
# --dir info--
now_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.dirname(now_dir)



output_dir = os.path.join(project_dir,"output")
onnx_path = os.path.join(output_dir, "onnx_output", "chatglm_6b.onnx")
new_onnx_dir = os.path.join(output_dir, "onnx_output_new")
new_onnx_path = os.path.join(new_onnx_dir, "chatglm_6b.onnx")
model_dir = os.path.join(project_dir, "models")
trt_model_path = os.path.join(model_dir, "model-FP16-MarkAll.plan")
num_layers = 1



# Data Loader
data_loader = DataLoader(
    input_metadata=TensorMetadata()
    .add('input_ids', dtype=np.int32, shape=(1, 512), min_shape=None, max_shape=None)
    .add('position_ids', dtype=np.int32, shape=(1, 2, 512), min_shape=None, max_shape=None)
    .add('attention_mask', dtype=np.int32, shape=(1,1, 512, 512), min_shape=None, max_shape=None)
    .add("past_key_values.0.decorder.key", dtype=np.float32, shape=(1, 1, 32, 128), min_shape=None, max_shape=None)
    .add("past_key_values.0.decorder.value", dtype=np.float32, shape=(1, 1, 32, 128), min_shape=None, max_shape=None)
)

print("load onnx")
# build_onnxrt_session = SessionFromOnnx(new_onnx_path, providers=["CUDAExecutionProvider"])
build_onnxrt_session = SessionFromOnnx(new_onnx_path)
print("load TensorRT engine")
engine_bytes = BytesFromPath(trt_model_path)
deserialize_engine = EngineFromBytes(engine_bytes)

# Runners
runners = [
    OnnxrtRunner(build_onnxrt_session),
    TrtRunner(deserialize_engine),
]

# Runner Execution
results = Comparator.run(runners, data_loader=data_loader)

success = True
# Accuracy Comparison for fp32
# compare_func = CompareFunc.simple(rtol={'': 5e-4}, atol={'': 5e-4})
# Accuracy Comparison for fp16
compare_func = CompareFunc.simple(rtol={'': 5e-3}, atol={'': 5e-3})
success &= bool(Comparator.compare_accuracy(results, compare_func=compare_func))

# Report Results
if not success:
    raise PolygraphyException('FAILED')
